 " Use Vim settings, rather then Vi settings (much better!).
 " This must be first, because it changes other options as a side effect.
set nocompatible

" ================ Plugin Init ====================
call plug#begin('{{ app.prefix }}/plugged')

  Plug 'joonty/vdebug'
	Plug 'embear/vim-localvimrc'
	Plug 'editorconfig/editorconfig-vim'
	Plug 'scrooloose/nerdtree'
	Plug 'jistr/vim-nerdtree-tabs'
	Plug 'altercation/vim-colors-solarized'
  Plug 'ctrlpvim/ctrlp.vim'
	Plug 'qpkorr/vim-bufkill'
	Plug 'vim-airline/vim-airline'
	Plug 'vim-airline/vim-airline-themes'
	Plug 'valloric/youcompleteme', { 'do': './install.py --java-completer' }
	Plug 'w0rp/ale'
	Plug 'tpope/vim-cucumber'
	Plug 'othree/html5.vim'
	Plug 'hail2u/vim-css3-syntax'
	Plug 'groenewege/vim-less'
	Plug 'pangloss/vim-javascript'
	Plug 'elzr/vim-json'
	Plug 'tpope/vim-liquid'
	Plug 'leafgarland/typescript-vim'
	Plug 'parkr/vim-jekyll'
	Plug 'vim-ruby/vim-ruby'
	Plug 'chase/vim-ansible-yaml'
	Plug 'htacg/tidy-html5'
	Plug 'tpope/vim-fugitive'
	Plug 'airblade/vim-gitgutter'
	Plug 'xuyuanp/nerdtree-git-plugin'
	Plug 'terryma/vim-multiple-cursors'
	Plug 'scrooloose/nerdcommenter'
	Plug 'godlygeek/tabular'
	Plug 'kana/vim-textobj-user'
	Plug 'nelstrom/vim-textobj-rubyblock'
	Plug 'Olical/vim-enmasse'
  Plug 'rodjek/vim-puppet'
	Plug 'honza/vim-snippets'
	Plug 'mattn/emmet-vim'
	Plug 'Lokaltog/vim-easymotion'
	Plug '29decibel/vim-stringify'
	Plug 'tpope/vim-surround'
	Plug 'tpope/vim-dispatch'
	Plug 'xolox/vim-misc'
	Plug 'tpope/vim-endwise'
	Plug 'slim-template/vim-slim'
	Plug 'evidens/vim-twig'
  Plug 'majutsushi/tagbar'

call plug#end()

" ===== Powerline ==============================
set laststatus=2
let g:airline#extensions#hunks#non_zero_only=1
let g:airline_powerline_fonts=1
let g:airline#extensions#whitespace#enabled=1
let g:airline#extensions#tabline#enabled=1
let g:airline#extensions#ale#enabled = 1
let g:airline_section_c='%<%f %#__accent_red#%{airline#util#wrap(airline#parts#readonly(),0)}%#__restore__#'
let g:airline_section_x='%{airline#util#prepend(airline#extensions#tagbar#currenttag(),0)}'
let g:airline_section_y='%{airline#util#wrap(airline#parts#filetype(),0)}'
let g:airline_section_z='%2p%% %{g:airline_symbols.linenr} %1l:%1v'
let g:airline_section_error='%{airline#util#wrap(airline#extensions#whitespace#check(),0)}%'
let g:airline_section_warning='%0{airline#util#wrap(&modified ? "MODIFIED" : "",-1)}'

" ===== General Config ==========================
set number                     " Line numbers are good
set backspace=indent,eol,start " Allow backspace in insert mode
set history=1000               " Store lots of :cmdline history
set showcmd                    " Show incomplete cmds down thebottom
set showmode                   " Show current mode down the bottom
set gcr=a:blinkon0             " Disable cursor blink
set visualbell                 " No sounds
set autoread                   " Reload files changed outside vim
set mouse=a                    " Enable mouse
" set cursorline                 " Highline line under cursor. Nice but makes things slow
colorscheme solarized          " Set the theme
syntax on                      " Turn on syntax highlighting
set background=dark

" === Search Settings  ========================
set incsearch        " Find the next match as we type the search
set hlsearch         " Hilight searches by default
set viminfo='100,f1  " Save up to 100 marks, enable capital marks

" ================ Turn Off Swap Files ==============
set noswapfile
set nobackup
set nowb

" ================ Persistent Undo ==================
" Keep undo history across sessions, by storing in file.
" Only works all the time.

silent !mkdir ~/.vim/backups > /dev/null 2>&1
set undodir=~/.vim/backups
set undofile

" ================ Indentation ======================
set autoindent
set smartindent
set smarttab
set shiftwidth=2
set softtabstop=2
set tabstop=2
set expandtab
set linebreak    "Wrap lines at convenient points

filetype plugin on
filetype indent on

" Display tabs and trailing spaces visually
set list listchars=tab:\ \ ,trail:·

" ================ Folds ============================
set foldmethod=indent   "fold based on indent
set foldnestmax=3       "deepest fold is 3 levels
set nofoldenable        "dont fold by default

" ================ Completion =======================
set wildmode=list:longest
set wildmenu                "enable ctrl-n and ctrl-p to scroll thru matches
set wildignore=*.o,*.obj,*~ "stuff to ignore when tab completing
set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=*DS_Store*
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.png,*.jpg,*.gif
set wildignore+=.git*
set wildignore+=.vagrant*

" ================ Scrolling ========================
set scrolloff=3         "Start scrolling when we're 3 lines away from margins
set sidescrolloff=15
set sidescroll=1
set guioptions=

" ========== Local .vimrc and EditorConfig ==========
let g:localvimrc_sandbox=0
let g:localvimrc_ask=0
let g:EditorConfig_exclude_patterns = ['fugitive://.*']
let g:ale_completion_enabled = 1

" =============== Git & Diff ========================
set diffopt=vertical

" =============== Command-T =========================
let g:user_emmet_leader_key='<c-x>'
let g:CommandTMatchWindowReverse=1
let g:CommandTFileScanner="git"
let g:CommandTGitIncludeUntracked=1

" ===== Font Settings ===========================
set t_Co=256
let g:miniBufExplForceSyntaxEnable = 1

" ===== NERDTree ================================
let NERDTreeShowBookmarks=1
let NERDTreeMinimalUI=1
let NERDTreeAutoCenter=0
let NERDTreeAutoCenterThreshold=0
let NERDTreeShowHidden=1
let NERDTreeChDirMode=2
let NERDTreeQuitOnOpen=1
let NERDTreeIgnore=['\.DS_Store']
let g:nerdtree_tabs_open_on_gui_startup = 0

" ===== Syntastic ===============================
set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 2
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_less_use_less_lint = 0
let g:colorizer_auto_filetype='less,scss,css,html'

let g:UltiSnipsExpandTrigger="<C-Space>"

let g:ale_linters = {
\   'javascript': ['eslint'],
\   'typescript': ['tslint']
\}
" ===== Core mappings =====
"
" Save file
noremap <C-s> :w<CR>

let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'javascript': ['prettier', 'eslint'],
\}

let g:multi_cursor_exit_from_visual_mode = 0
let g:multi_cursor_exit_from_insert_mode = 0

" NERDTree
nmap <Tab> :NERDTreeToggle<CR>
nmap <leader><leader> :CtrlP<CR>
nmap // :CtrlPMRU<CR>

" EasyMotion Mappings
nmap <Leader> <Plug>(easymotion-prefix)

" == Custom commands ==
command! -nargs=+ CustomGrep execute 'silent Ggrep! <args>' | copen
command! -nargs=1 -range To :<line1>,<line2>y c|:new +put!\ c <args> " Yank a line or range into a new file
command CommitCleanup %g/^ *\(commit\|Author:\|Date:\|Merge:\|$\)/d
command! Jsonify :%!python -m json.tool

" ======== Fix ========
nnoremap <leader>r :EnMasse<CR>
nmap <leader>fu :YcmCompleter FixIt<CR>
nmap <leader>fr :YcmCompleter RefactorRename<Space>
nmap  :YcmCompleter FixIt<CR>
imap  <Esc>:YcmCompleter FixIt<CR>i

" ======== GIT ========
nmap <leader>gn :GitGutterNextHunk<CR>
nmap <leader>gp :GitGutterPrevHunk<CR>
nmap <leader>gr :GitGutterRevertHunk<CR>
nmap <leader>gs :Gstatus<CR>
nmap <leader>gg :CustomGrep

" ====== JumpTo  ======
nmap <leader>jd :YcmCompleter GoToDefinition<CR>
nmap <leader>jr :YcmCompleter GoToReferences<CR>
nmap <leader>jj :NERDTreeFind<CR>
nmap <leader>jb :CommandTBuffer<CR>
nmap <leader>jl :CommandTLine<CR>

" Terminal
"nnoremap <leader>tt :tabe term://bash\ --login<CR>i
"nnoremap <leader>tv :vsp term://bash\ --login<CR>i
"nnoremap <leader>ts :sp term://bash\ --login<CR>i
nnoremap <leader>tt :tab terminal bash --login<CR>
nnoremap <leader>tv :vertical terminal bash --login<CR>
nnoremap <leader>ts :terminal bash --login<CR>
tnoremap <leader><Esc> <C-\><C-n>

" Close the file without losing the window
nmap <leader>bda :bufdo :bd<CR>
nmap <leader>q :BD<CR>
nmap <C-c> :BD<CR>

" Paste the last yank register while in insert mode
imap <C-v> <Esc>pi

" Search for occurances of visually selected text
vnoremap // y/<C-R>"<CR>
vnoremap <leader><Tab> :Tabularize /
